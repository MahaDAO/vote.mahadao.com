{"version":3,"sources":["imgs/close-inline.svg","components/CreatePoll/CreatePollInput.js","components/CreatePoll/CreatePollOverview.js","components/CreatePoll/CreatePollTime.js","components/CreatePoll/CreatePollMarkdown.js","components/CreatePoll/CreatePollResult.js","pages/CreatePoll.js"],"names":["module","exports","SectionWrapper","styled","div","StyledBody","p","CreatePollInput","title","inputProps","width","marginTop","SectionText","cursor","Code","pre","overflow","Label","label","WarningText","display","alignItems","CreatePollOverview","state","confirmCreatePoll","toggleCheckbox","setState","render","props","start","end","markdown","hash","url","submitAttempted","handleParentState","execCreatePoll","allAccounts","urlValid","match","URL_REGEX","urlError","execPollValid","length","execPollError","startUTC","Date","toUTCString","endUTC","substring","variant","onClick","copyToClipboard","placeholder","value","onChange","e","key","stopPropagation","target","handlePollState","error","failureMessage","id","checked","htmlFor","a","async","disabled","step","Component","connect","accounts","TimeLabel","CreatePollTime","timeError","disableClock","showLeadingZeros","clearIcon","t","getTime","calculateTimeSpan","converter","Showdown","tables","simplifiedAutoLink","strikethrough","tasklists","VoteOptionsGrid","OptionText","CloseIcon","closeImg","DropdownText","alignSelf","marginLeft","flexDirection","justifyContent","padding","backgroundColor","CreatePollMarkdown","categories","voteTypes","parentState","addPollOption","removePollOption","resetPollState","parseMarkdown","summary","category","link","option","choices","content","selectedVoteType","selectedTab","titleValid","summaryValid","linkValid","choicesValid","contentValid","timeValid","POLL_DEFAULT_START","isValidSubmission","titleError","summaryError","linkError","choicesError","contentError","after","map","args","i","opt","idx","Dropdown","color","items","renderItem","item","renderRowItem","onSelect","allowEmpty","onTabChange","tab","generateMarkdownPreview","Promise","resolve","makeHtml","ResultTitle","textAlign","CreatePollResult","pollTxStatus","txHash","txHashUrl","ethScanLink","netIdToName","window","maker","service","networkId","console","log","LOADING","PollTxState","SUCCESS","ERROR","href","cutMiddle","mt","Loader","size","riseUp","keyframes","StyledTop","StyledTitle","theme","text","darker_default","RiseUp","ContentWrapper","Card","INITIAL_POLL_STATE","POLL_DEFAULT_END","paddingBottom","CreatePoll","filter","_","index","choiceString","reduce","acc","yml","md","generateIPFSHash","encoding","ipfsHash","txMgr","createPollTx","_pollingContract","createPoll","Math","floor","listen","pending","tx","parseInt","receipt","logs","topics","selected","steps","newState"],"mappings":"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","file":"static/js/4.559796a6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/close-inline.c1dddb8c.svg\";","import React, { Fragment } from 'react';\nimport styled from 'styled-components';\nimport { Input } from '@makerdao/ui-components-core';\n\nconst SectionWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  padding-bottom: 40px;\n`;\n\nconst StyledBody = styled.p`\n  width: 200px;\n  text-align: left;\n  line-height: 30px;\n  margin-top: 5px;\n  font-size: 17px;\n  color: #546978;\n`;\n\nexport default function CreatePollInput({ title, ...inputProps }) {\n  return (\n    <Fragment>\n      <SectionWrapper>\n        <StyledBody>{title}:</StyledBody>\n        <Input width=\"600px\" {...inputProps} />\n      </SectionWrapper>\n    </Fragment>\n  );\n}\n","import React, { Component, Fragment } from 'react';\nimport styled from 'styled-components';\nimport { Box, Button, Checkbox } from '@makerdao/ui-components-core';\nimport { copyToClipboard } from '../../utils/misc';\nimport { URL_REGEX } from '../../utils/constants';\nimport CreatePollInput from './CreatePollInput';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nconst StyledBody = styled.p`\n  width: 150px;\n  text-align: left;\n  line-height: 30px;\n  margin-top: 5px;\n  font-size: 17px;\n  color: #546978;\n`;\n\nconst SectionWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  padding-bottom: 40px;\n`;\n\nconst SectionText = styled.p`\n  text-align: left;\n  line-height: 30px;\n  margin-top: 5px;\n  font-size: 17px;\n  color: #546978;\n  margin-bottom: 20px;\n`;\n\nconst Code = styled.pre`\n  font-size: 14px;\n  padding: 30px;\n  border: 1px solid black;\n  white-space: pre-wrap;\n`;\n\nconst Label = styled.label`\n  font-size: 0.9em;\n  color: #546978;\n  margin-left: 10px;\n`;\n\nconst WarningText = styled.p`\n  font-size: 0.9em;\n  color: #f35833;\n  margin-top: 11px;\n`;\n\nclass CreatePollOverview extends Component {\n  state = {\n    confirmCreatePoll: false\n  };\n\n  toggleCheckbox = () => {\n    this.setState({\n      confirmCreatePoll: !this.state.confirmCreatePoll\n    });\n  };\n\n  render = () => {\n    const {\n      start,\n      end,\n      markdown,\n      hash,\n      url,\n      submitAttempted,\n      handleParentState,\n      execCreatePoll,\n      allAccounts\n    } = this.props;\n    const urlValid = url.match(URL_REGEX);\n    const urlError = submitAttempted && !urlValid;\n\n    const execPollValid = allAccounts.length;\n    const execPollError = submitAttempted && !execPollValid;\n\n    const handlePollState = (e, key) => {\n      e.stopPropagation();\n      handleParentState({\n        [key]: e.target.value\n      });\n    };\n\n    const startUTC = new Date(start).toUTCString();\n    const endUTC = new Date(end).toUTCString();\n\n    return (\n      <Fragment>\n        <SectionText>\n          This is an overview of the new poll. The polling window will be open\n          from {startUTC.substring(0, startUTC.length - 4)} UTC and will close\n          on {endUTC.substring(0, endUTC.length - 4)} UTC.\n        </SectionText>\n        <SectionText>\n          The markdown and hash below should be copied into the cms and a the\n          subsequent poll's content url should be retrieved and pasted in the\n          input field below.\n        </SectionText>\n        <SectionWrapper>\n          <Box>\n            <StyledBody>Markdown:</StyledBody>\n            <Button\n              css={{ marginTop: '10px' }}\n              variant=\"secondary\"\n              onClick={() => copyToClipboard(markdown)}\n            >\n              Copy\n            </Button>\n          </Box>\n          <Code\n            css={{\n              width: '800px',\n              overflow: 'auto',\n              cursor: 'pointer'\n            }}\n            onClick={() => copyToClipboard(markdown)}\n          >\n            {markdown}\n          </Code>\n        </SectionWrapper>\n\n        <SectionWrapper>\n          <StyledBody>Hash:</StyledBody>\n          <SectionText\n            css={{\n              width: '600px',\n              cursor: 'pointer'\n            }}\n            onClick={() => copyToClipboard(hash)}\n          >\n            {hash}\n          </SectionText>\n          <Button\n            variant=\"secondary\"\n            onClick={() => copyToClipboard(hash)}\n            css={{ width: '200px' }}\n          >\n            Copy\n          </Button>\n        </SectionWrapper>\n\n        <CreatePollInput\n          {...{\n            title: 'Poll URL',\n            placeholder: 'The URL from which the poll can be found',\n            value: url,\n            onChange: e => handlePollState(e, 'url'),\n            error: urlError,\n            failureMessage: urlError && 'The Poll URL must be a valid url',\n            width: '800px'\n          }}\n        />\n\n        <div css={{ display: 'flex', alignItems: 'flex-start' }}>\n          <Checkbox\n            id=\"createPollCheckbox\"\n            checked={this.state.confirmCreatePoll}\n            onChange={this.toggleCheckbox}\n          />\n          <Label htmlFor=\"createPollCheckbox\">\n            Confirm that you have copied the above content into the cms\n          </Label>\n        </div>\n\n        <SectionWrapper css={{ marginTop: '20px' }}>\n          <Button\n            onClick={async () => {\n              handleParentState({ submitAttempted: true });\n              if (urlValid && execPollValid && this.state.confirmCreatePoll) {\n                execCreatePoll();\n              }\n            }}\n            disabled={execPollError && !this.state.confirmCreatePoll}\n          >\n            Create Poll\n          </Button>\n          <Box width=\"32px\" />\n          <Button\n            variant=\"secondary\"\n            onClick={() => handleParentState({ step: 0 })}\n          >\n            Edit\n          </Button>\n        </SectionWrapper>\n\n        {execPollError && (\n          <SectionWrapper>\n            <WarningText>\n              User must have an account to create the poll\n            </WarningText>\n          </SectionWrapper>\n        )}\n      </Fragment>\n    );\n  };\n}\n\nCreatePollOverview.propTypes = {\n  allAccounts: PropTypes.array\n};\n\nconst mapStateToProps = ({ accounts }, props) => ({\n  allAccounts: accounts.allAccounts\n});\n\nexport default connect(mapStateToProps)(CreatePollOverview);\n","import React, { Fragment } from 'react';\nimport { calculateTimeSpan } from '../../utils/misc';\nimport styled from 'styled-components';\nimport DateTimePicker from 'react-datetime-picker';\nimport { Box } from '@makerdao/ui-components-core';\n\nconst StyledBody = styled.p`\n  width: 200px;\n  text-align: left;\n  line-height: 30px;\n  margin-top: 5px;\n  font-size: 17px;\n  color: #546978;\n`;\n\nconst SectionWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  padding-bottom: 40px;\n`;\n\nconst TimeLabel = styled(StyledBody)`\n  width: 400px;\n`;\n\nconst WarningText = styled.p`\n  font-size: 0.9em;\n  color: #f35833;\n  margin-top: 11px;\n`;\n\nexport default function CreatePollTime({\n  start,\n  end,\n  timeError,\n  handleParentState\n}) {\n  const startUTC = new Date(start).toUTCString();\n  const endUTC = new Date(end).toUTCString();\n\n  return (\n    <Fragment>\n      <SectionWrapper>\n        <StyledBody>Poll Start Time (Local):</StyledBody>\n        <DateTimePicker\n          css={{ width: '600px' }}\n          disableClock\n          showLeadingZeros\n          clearIcon={null}\n          onChange={t =>\n            handleParentState({\n              start: t.getTime(),\n              end: t.getTime() > end ? t.getTime() : end\n            })\n          }\n          value={new Date(start)}\n        />\n      </SectionWrapper>\n      <SectionWrapper>\n        <StyledBody>Poll Start Time (UTC):</StyledBody>\n        <Box width=\"600px\">\n          <TimeLabel>{startUTC.substring(0, startUTC.length - 4)}</TimeLabel>\n        </Box>\n      </SectionWrapper>\n      <SectionWrapper>\n        <StyledBody>Poll End Time (Local):</StyledBody>\n        <DateTimePicker\n          css={{ width: '600px' }}\n          disableClock\n          showLeadingZeros\n          clearIcon={null}\n          onChange={t =>\n            handleParentState({\n              start: t.getTime() < start ? t.getTime() : start,\n              end: t.getTime()\n            })\n          }\n          value={new Date(end)}\n        />\n      </SectionWrapper>\n      <SectionWrapper>\n        <StyledBody>Poll Start Time (UTC):</StyledBody>\n        <Box width=\"600px\">\n          <TimeLabel>{endUTC.substring(0, endUTC.length - 4)}</TimeLabel>\n        </Box>\n      </SectionWrapper>\n      <SectionWrapper>\n        <StyledBody>Poll Duration</StyledBody>\n        <Box width=\"600px\">\n          <TimeLabel>{calculateTimeSpan(start, end)}</TimeLabel>\n          {timeError && (\n            <WarningText>Start time cannot be a past date</WarningText>\n          )}\n        </Box>\n      </SectionWrapper>\n    </Fragment>\n  );\n}\n","import React, { Fragment } from 'react';\nimport styled from 'styled-components';\nimport { Button, Box } from '@makerdao/ui-components-core';\nimport Card from '../Card';\nimport closeImg from '../../imgs/close-inline.svg';\nimport CreatePollInput from './CreatePollInput';\nimport CreatePollTime from './CreatePollTime';\nimport Dropdown from '../Dropdown';\nimport { POLL_DEFAULT_START, URL_REGEX } from '../../utils/constants';\n\nimport ReactMde from 'react-mde';\nimport * as Showdown from 'showdown';\nimport 'react-mde/lib/styles/css/react-mde-all.css';\n\nconst converter = new Showdown.Converter({\n  tables: true,\n  simplifiedAutoLink: true,\n  strikethrough: true,\n  tasklists: true\n});\n\nconst WarningText = styled.p`\n  font-size: 0.9em;\n  color: #f35833;\n  margin-top: 11px;\n`;\n\nconst SectionWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  padding-bottom: 40px;\n`;\n\nconst StyledBody = styled.p`\n  width: 200px;\n  text-align: left;\n  line-height: 30px;\n  margin-top: 5px;\n  font-size: 17px;\n  color: #546978;\n`;\n\nconst SectionText = styled.p`\n  text-align: left;\n  line-height: 30px;\n  margin-top: 5px;\n  font-size: 17px;\n  color: #546978;\n  margin-bottom: 20px;\n`;\n\nconst VoteOptionsGrid = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-column-gap: 10px;\n  grid-row-gap: 20px;\n`;\n\nconst OptionText = styled.p`\n  text-align: left;\n  line-height: 30px;\n  font-size: 17px;\n  color: #fff;\n`;\n\nconst CloseIcon = styled.p`\n  width: 15px;\n  height: 15px;\n  background-color: red;\n  mask: url(${closeImg}) center no-repeat;\n  cursor: pointer;\n`;\n\nconst DropdownText = styled.p`\n  text-overflow: ellipsis;\n  overflow: hidden;\n  width: ${({ width }) => (width ? width : '125px')};\n  margin-left: 13px;\n  margin-right: 13px;\n  color: black;\n`;\n\nexport default function CreatePollMarkdown({\n  categories,\n  voteTypes,\n  parentState,\n  addPollOption,\n  removePollOption,\n  handleParentState,\n  resetPollState,\n  parseMarkdown\n}) {\n  const {\n    title,\n    summary,\n    start,\n    end,\n    category,\n    link,\n    option,\n    choices,\n    content,\n    selectedVoteType,\n    submitAttempted,\n    selectedTab\n  } = parentState;\n\n  const titleValid = !!title;\n  const summaryValid = !!summary;\n  const linkValid = link.match(URL_REGEX);\n  const choicesValid = choices.length > 1;\n  const contentValid = !!content;\n  const timeValid = start >= POLL_DEFAULT_START;\n\n  const isValidSubmission =\n    titleValid &&\n    summaryValid &&\n    linkValid &&\n    choicesValid &&\n    contentValid &&\n    timeValid;\n\n  const titleError = submitAttempted && !titleValid;\n  const summaryError = submitAttempted && !summaryValid;\n  const linkError = submitAttempted && !linkValid;\n  const choicesError = submitAttempted && !choicesValid;\n  const contentError = submitAttempted && !contentValid;\n  const timeError = submitAttempted && !timeValid;\n\n  const handlePollState = (e, key) => {\n    e.stopPropagation();\n    handleParentState({\n      [key]: e.target.value\n    });\n  };\n\n  return (\n    <Fragment>\n      <SectionText>\n        This form will generate a formatted markdown file which can be copied\n        and included in the cms\n      </SectionText>\n      {[\n        {\n          title: 'Title',\n          placeholder: 'This will be the poll title',\n          value: title,\n          onChange: e => handlePollState(e, 'title'),\n          error: titleError,\n          failureMessage: titleError && 'Title is required'\n        },\n        {\n          title: 'Summary',\n          placeholder: 'Give a short description of what this poll is for',\n          value: summary,\n          onChange: e => handlePollState(e, 'summary'),\n          error: summaryError,\n          failureMessage: summaryError && 'Summary is required'\n        },\n        {\n          title: 'Discussion Link',\n          placeholder: 'Link to where this Polling proposal will be discussed',\n          value: link,\n          onChange: e => handlePollState(e, 'link'),\n          error: linkError,\n          failureMessage: linkError && 'Link must be a valid URL'\n        },\n        {\n          title: 'Vote Options',\n          placeholder: 'Add possible voting options',\n          value: option,\n          onChange: e => handlePollState(e, 'option'),\n          error: choicesError,\n          failureMessage: choicesError && 'Must be at least two voting options',\n          after: (\n            <Button\n              css={{ alignSelf: 'center', marginLeft: '10px' }}\n              width=\"190px\"\n              onClick={addPollOption}\n            >\n              Add Option\n            </Button>\n          )\n        }\n      ].map((args, i) => (\n        <CreatePollInput key={i} {...args} />\n      ))}\n\n      <SectionWrapper>\n        <StyledBody />\n        <VoteOptionsGrid>\n          {choices.map((opt, idx) => (\n            <Card\n              key={idx}\n              css={{\n                display: 'flex',\n                flexDirection: 'row',\n                justifyContent: 'space-between',\n                alignItems: 'center',\n                width: '600px',\n                padding: '10px',\n                backgroundColor: '#30BD9F'\n              }}\n            >\n              <OptionText>\n                #{idx} - {opt}\n              </OptionText>\n              {idx > 0 && <CloseIcon onClick={() => removePollOption(idx)} />}\n            </Card>\n          ))}\n        </VoteOptionsGrid>\n      </SectionWrapper>\n\n      <CreatePollTime\n        {...{\n          start,\n          end,\n          timeError,\n          handleParentState\n        }}\n      />\n\n      <SectionWrapper>\n        <StyledBody>Vote Type:</StyledBody>\n        <Box width=\"600px\">\n          <Dropdown\n            color=\"light_grey2\"\n            items={voteTypes}\n            renderItem={item => (\n              <DropdownText width=\"225px\">{item}</DropdownText>\n            )}\n            renderRowItem={item => (\n              <DropdownText width=\"225px\">{item}</DropdownText>\n            )}\n            value={selectedVoteType}\n            onSelect={value => handleParentState({ selectedVoteType: value })}\n            allowEmpty={false}\n          />\n        </Box>\n      </SectionWrapper>\n\n      <SectionWrapper>\n        <StyledBody>Category:</StyledBody>\n        <Box width=\"600px\">\n          <Dropdown\n            color=\"light_grey2\"\n            items={categories}\n            renderItem={item => (\n              <DropdownText width=\"225px\">{item}</DropdownText>\n            )}\n            renderRowItem={item => (\n              <DropdownText width=\"225px\">{item}</DropdownText>\n            )}\n            value={category}\n            onSelect={value => handleParentState({ category: value })}\n            allowEmpty={false}\n          />\n        </Box>\n      </SectionWrapper>\n\n      <SectionWrapper>\n        <StyledBody>Proposal:</StyledBody>\n        <Box width=\"600px\">\n          <ReactMde\n            value={content}\n            onChange={value => handleParentState({ content: value })}\n            selectedTab={selectedTab}\n            onTabChange={tab => handleParentState({ selectedTab: tab })}\n            generateMarkdownPreview={markdown =>\n              Promise.resolve(converter.makeHtml(markdown))\n            }\n          />\n          {contentError && <WarningText>Proposal is required</WarningText>}\n        </Box>\n      </SectionWrapper>\n\n      <SectionWrapper>\n        <Button\n          onClick={() => {\n            handleParentState({\n              submitAttempted: true\n            });\n            if (isValidSubmission) {\n              parseMarkdown();\n            }\n          }}\n        >\n          Create Markdown\n        </Button>\n        <Box width=\"32px\" />\n        <Button variant=\"secondary\" onClick={resetPollState}>\n          Reset Form\n        </Button>\n      </SectionWrapper>\n    </Fragment>\n  );\n}\n","import React, { Fragment } from 'react';\nimport styled from 'styled-components';\nimport { Button, Box, Link } from '@makerdao/ui-components-core';\nimport Loader from '../Loader';\nimport { copyToClipboard, cutMiddle } from '../../utils/misc';\nimport { PollTxState } from '../../utils/constants';\nimport { netIdToName, ethScanLink } from '../../utils/ethereum';\n\nconst ResultTitle = styled.p`\n  text-align: center;\n  line-height: 35px;\n  margin-top: 20px;\n  font-size: 22px;\n  color: #546978;\n`;\n\nconst SectionWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  padding-bottom: 40px;\n`;\n\nconst SectionText = styled.p`\n  text-align: left;\n  line-height: 30px;\n  margin-top: 5px;\n  font-size: 17px;\n  color: #546978;\n  margin-bottom: 20px;\n`;\n\nexport default function CreatePollResult({\n  pollTxStatus,\n  id,\n  handleParentState,\n  resetPollState,\n  title,\n  txHash\n}) {\n  const txHashUrl = ethScanLink(\n    txHash,\n    netIdToName(window.maker.service('web3').networkId())\n  );\n  console.log(txHashUrl);\n  const { LOADING, SUCCESS, ERROR } = PollTxState;\n  switch (pollTxStatus) {\n    case LOADING:\n      return (\n        <Fragment>\n          <ResultTitle>\n            <Link href={txHashUrl} target=\"_blank\">\n              Transaction {cutMiddle(txHash, 6)} is in progress...\n            </Link>\n          </ResultTitle>\n          <Box alignSelf=\"center\" mt=\"40px\">\n            <Loader size={40} />\n          </Box>\n        </Fragment>\n      );\n    case SUCCESS:\n      return (\n        <Fragment>\n          <ResultTitle>\n            <Link href={txHashUrl} target=\"_blank\">\n              Transaction {cutMiddle(txHash, 6)} completed!\n            </Link>\n          </ResultTitle>\n          <ResultTitle>\n            Poll #{id} - {title} created!\n          </ResultTitle>\n          <SectionWrapper>\n            <SectionText css={{ textAlign: 'center', marginTop: '30px' }}>\n              The Poll ID should now be copied into the cms.\n            </SectionText>\n          </SectionWrapper>\n          <SectionWrapper css={{ marginTop: '20px' }}>\n            <Button onClick={() => copyToClipboard(id)} variant=\"secondary\">\n              Copy Poll ID\n            </Button>\n            <Box width=\"32px\" />\n            <Button variant=\"secondary\" onClick={resetPollState}>\n              Create New Poll\n            </Button>\n          </SectionWrapper>\n        </Fragment>\n      );\n    case ERROR:\n      return (\n        <Fragment>\n          <ResultTitle>Something is not quite right...</ResultTitle>\n          <Button\n            css={{ marginTop: '30px' }}\n            variant=\"secondary\"\n            onClick={() => handleParentState({ step: 1 })}\n          >\n            Back\n          </Button>\n        </Fragment>\n      );\n    default:\n      return null;\n  }\n}\n","import React, { Component } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport Card from '../components/Card';\nimport theme from '../theme';\nimport { generateIPFSHash } from '../utils/ipfs';\nimport { Stepper } from '@makerdao/ui-components-core';\nimport CreatePollOverview from '../components/CreatePoll/CreatePollOverview';\nimport CreatePollMarkdown from '../components/CreatePoll/CreatePollMarkdown';\nimport CreatePollResult from '../components/CreatePoll/CreatePollResult';\nimport {\n  POLL_DEFAULT_START,\n  POLL_DEFAULT_END,\n  PollTxState\n} from '../utils/constants';\n\nconst riseUp = keyframes`\n0% {\n  opacity: 0;\n  transform: translateY(15px);\n}\n100% {\n  opacity: 1;\n  transform: translateY(0);\n}\n`;\n\nconst StyledTop = styled.div`\n  padding: 54px 16px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  max-width: 1140px;\n  margin: auto;\n`;\n\nconst StyledTitle = styled.p`\n  font-size: 28px;\n  color: ${theme.text.darker_default};\n  line-height: normal;\n  font-weight: 500;\n`;\n\nconst RiseUp = styled.div`\n  animation: ${riseUp} 0.75s ease-in-out;\n`;\n\nconst ContentWrapper = styled(Card)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 80px 100px;\n`;\n\nconst ABSTAIN = 'Abstain';\nconst voteTypes = ['Ranked Choice IRV', 'Plurality Voting'];\nconst categories = [\n  'System Risk Variables',\n  'Protocol Changes',\n  'Procedural Changes',\n  'MIPs',\n  'Oracles',\n  'Collateral Onboarding',\n  'Other'\n];\n\nconst INITIAL_POLL_STATE = {\n  title: '',\n  summary: '',\n  category: categories[0],\n  selectedVoteType: voteTypes[0],\n  start: POLL_DEFAULT_START,\n  end: POLL_DEFAULT_END,\n  link: '',\n  option: '',\n  choices: [ABSTAIN],\n  content: '',\n  markdown: '',\n  pollTxStatus: null,\n  hash: '',\n  submitAttempted: false,\n  selectedTab: 'write',\n  id: null,\n  url: '',\n  step: 0,\n  txHash: null\n};\n\nclass CreatePoll extends Component {\n  state = INITIAL_POLL_STATE;\n\n  addPollOption = () => {\n    const { option, choices } = this.state;\n    if (option.length) {\n      this.setState({\n        option: '',\n        choices: [...choices, option]\n      });\n    }\n  };\n\n  removePollOption = idx => {\n    const { choices } = this.state;\n    this.setState({\n      choices: choices.filter((_, index) => index !== idx)\n    });\n  };\n\n  resetPollState = () => {\n    this.setState(INITIAL_POLL_STATE);\n  };\n\n  parseMarkdown = async () => {\n    const {\n      title,\n      summary,\n      category,\n      link,\n      choices,\n      content,\n      selectedVoteType\n    } = this.state;\n    const choiceString = choices.reduce(\n      (acc, opt, idx) => `${acc}   ${idx}: ${opt}\\n`,\n      ''\n    );\n    const yml = `---\\ntitle: ${title}\\nsummary: ${summary}\\ncategory: ${category}\\ndiscussion_link: ${link}\\nvote_type: ${selectedVoteType}\\noptions:\\n${choiceString}---\\n`;\n    const md = `# Poll: ${title}\\n\\n${content}`;\n    const ipfsHash = await generateIPFSHash(`${yml}${md}`, {\n      encoding: 'ascii'\n    });\n    this.setState({\n      markdown: `${yml}${md}`,\n      step: 1,\n      submitAttempted: false,\n      hash: ipfsHash\n    });\n  };\n\n  execCreatePoll = async () => {\n    const { start, end, hash, url } = this.state;\n    try {\n      const txMgr = window.maker.service('transactionManager');\n\n      const createPollTx = window.maker\n        .service('govPolling')\n        ._pollingContract()\n        .createPoll(\n          Math.floor(start / 1000),\n          Math.floor(end / 1000),\n          hash,\n          url\n        );\n\n      txMgr.listen(createPollTx, {\n        pending: async tx => {\n          this.setState({\n            txHash: tx.hash,\n            step: 2,\n            pollTxStatus: PollTxState.LOADING\n          });\n        }\n      });\n\n      const id = parseInt((await createPollTx).receipt.logs[0].topics[2]);\n      this.setState({\n        id,\n        pollTxStatus: PollTxState.SUCCESS\n      });\n    } catch (e) {\n      console.error(e);\n      this.setState({ pollTxStatus: PollTxState.ERROR });\n    }\n  };\n\n  render = () => {\n    const {\n      title,\n      start,\n      end,\n      markdown,\n      pollTxStatus,\n      hash,\n      url,\n      submitAttempted,\n      id,\n      step,\n      txHash\n    } = this.state;\n\n    return (\n      <RiseUp>\n        <StyledTop>\n          <StyledTitle>Create a new Polling proposal</StyledTitle>\n        </StyledTop>\n        <ContentWrapper>\n          <Stepper\n            css={{ paddingBottom: '30px' }}\n            selected={step}\n            steps={[\n              'Create Poll Markdown',\n              'Deploy Poll Contract',\n              'Poll Result'\n            ]}\n          />\n          {(() => {\n            switch (step) {\n              case 0:\n                return (\n                  <CreatePollMarkdown\n                    categories={categories}\n                    voteTypes={voteTypes}\n                    parentState={this.state}\n                    addPollOption={this.addPollOption}\n                    removePollOption={this.removePollOption}\n                    handleParentState={newState => this.setState(newState)}\n                    resetPollState={this.resetPollState}\n                    parseMarkdown={this.parseMarkdown}\n                  />\n                );\n              case 1:\n                return (\n                  <CreatePollOverview\n                    title={title}\n                    start={start}\n                    end={end}\n                    markdown={markdown}\n                    hash={hash}\n                    url={url}\n                    submitAttempted={submitAttempted}\n                    handleParentState={newState => this.setState(newState)}\n                    execCreatePoll={this.execCreatePoll}\n                  />\n                );\n              case 2:\n                return (\n                  <CreatePollResult\n                    pollTxStatus={pollTxStatus}\n                    id={id}\n                    title={title}\n                    txHash={txHash}\n                    handleParentState={newState => this.setState(newState)}\n                    resetPollState={this.resetPollState}\n                  />\n                );\n              default:\n                return null;\n            }\n          })()}\n        </ContentWrapper>\n      </RiseUp>\n    );\n  };\n}\n\nexport default CreatePoll;\n"],"sourceRoot":""}